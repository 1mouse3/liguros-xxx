# Sourced from this lot of folks for this ebuild by mouse <1mouse3@gmail.com>
#
# Copyright (C) 2020-2021 illiliti                 <illiliti@protonmail.com>
# Copyright (C) 2020      Timothy Robert Bednarzyk <trbednarzyk@protonmail.com>
#
# Copyright (C) 2021-2024 Zeppe-Lin Team           <https://zeppe-lin.github.io>
# Copyright (C) 2021-2024 Alexandr Savca           <alexandr.savca89@gmail.com>
# Distributed under the terms of the GNU General Public License v3
EAPI=8

HOMEPAGE="https://github.com/zeppe-lin/mkinitramfs"
SRC_URI="https://github.com/zeppe-lin/mkinitramfs/archive/refs/tags/v0.5.tar.gz"

# findfs should give partuuid and getopt? ( app-misc/getopt ) broken

ALTERNATIVES=(
        bash:app-shells/bash
        busybox:sys-apps/busybox
        dash:app-shells/dash
        ksh:app-shells/ksh
        "lksh:app-shells/mksh[lksh]"
        mksh:app-shells/mksh
)


inherit mount-boot secureboot toolchain-funcs mdevd

KEYWORDS="~alpha ~amd64 ~arm ~arm64 ~hppa ~loong ~m68k ~mips ~ppc ~ppc64 ~riscv ~s390 ~sparc ~x86"
IUSE="busybox bash device-mapper efistub findfs lvm luks blkid partuuid mdadm e2fs getopt ldd libressl mdevd mdev modules mount cpio uefi-mkconfig sh secureboot zfs strip -systemd switch_root xfs xz"

REQUIRED_USE="
        || (sysusers mdevd)
        luks? ( gcrypt )
        libressl? ( gcrypt )
"
COMMON_DEPEND="
        selinux? ( sys-libs/libselinux:0= )
"
DEPEND="
        !sys-apps/systemd ( sys-apps/openrc )
        ldd? ( sys-libs/glibc )
        efistub? ( sys-boot/uefi-mkconfig )
        efistub? ( sys-kernel/hardened-sources )
        uefi-mkconfig? ( sys-boot/uefi-mkconfig )
        secureboot? ( sys-boot/shim )
        sh? ( app-shells/bash )
        cpio? ( app-alternatives/cpio )
	sys-apps/util-linux[unicode,uuidd]
        getopt? ( sys-apps/util-linux )
        findfs? ( sys-apps/util-linux )
        switch_root? ( sys-apps/util-linux )
        mount? ( sys-apps/util-linux )
        mount? ( sys-fs/fuse # grub?
	device-mapper? ( sys-fs/lvm2[static] )
        strip? ( sys-devel/binutils )
	zfs? ( sys-fs/zfs ) # or libzfs
	xfs? ( sys-fs/xfsprogs )
        e2fs? ( sys-fs/e2fsprogs )
	xz? ( app-arch/xz-utils )
	mdadm? ( sys-fs/mdadm )
        sys-apps/coreutils
        sys-apps/findutils
        sys-kernel/installkernel[-systemd,efistub]
        sys-boot/efibootmgr
"
# glibc should give sys-kernel/linux-headers

RDEPEND="(
        || (
                sys-fs/mdevd?(
                        acct-group/audio
                        acct-group/cdrom
                        acct-group/dialout
                        acct-group/disk
                        acct-group/floppy
                        acct-group/input
                        acct-group/kmem
                        acct-group/kvm
                        acct-group/lp
                        acct-group/render
                        acct-group/sgx
                        acct-group/tape
                        acct-group/tty
                        acct-group/usb
                        acct-group/video
                        !sys-apps/gentoo-systemd-integration
                        !sys-apps/hwids[udev]
                        !sys-fs/udev
                        !sys-fs/eudev
                        mdev? ( sys-apps/busybox[mdev] )
                )
        || (
                >=sys-apps/sysvinit-2.87-r3
                sys-apps/openrc[sysv-utils(-),selinux?]
                sys-apps/openrc-navi[sysv-utils(-),selinux?]
        )
        modutils? ( sys-apps/busybox[modutils] )
        gcrypt? ( dev-libs/libgcrypt:0= )
        luks? ( sys-fs/cryptsetup[static] )
        libressl? ( dev-libs/libressl )
        selinux? ( >=sys-libs/libselinux-2.2.2-r4[${MULTILIB_USEDEP}] )
        uuidd? ( acct-user/uuidd )
        elibc_glibc? ( sys-libs/glibc[static-libs(+)] )
        firmware? ( sys-kernel/linux-firmware )
)
"
        #sys-fs/loop-aes
IDEPEND="modules? ( sys-apps/kmod[tools] )"
RESTRICT="strip"
# If need anything with qemu, look in sys-kernel/dracut-9999
BDEPEND="
        test? (
                app-admin/genromfs
                app-alternatives/cpio
                app-arch/lzop
                dev-libs/libisoburn
                sys-apps/miscfiles
                sys-fs/squashfs-tools
                sys-block/sas3ircu
                sys-fs/lvm2[lvm]
                sys-fs/mdadm
                sys-block/open-iscsi
"
                #app-emulation/qemu
                #sys-block/parted
DESCRIPTION=
KEYWORDS="~x86 ~amd64 ~ppc"

SLOT="0.5"

CONFIG_CHECK="BLK_DEV_DM"
ERROR_BLK_DEV_DM="
        Please enable Device Mapper support in your kernel config
        -> Device Drivers
                -> Multiple devices driver support (RAID and LVM)
                        -> Multiple devices driver support (RAID and LVM)
                                <*>/<M> Device mapper support
"

pkg_pretend()
        use uefi && mount-boot_pkg_pretend
}
pkg_setup(){
        use efistub && CONFIG_CHECK="~EFI_STUB" linux-info_pkg_setup
        use uefi && secureboot_pkg_setup
        if linux_config_exists; then
                local CONFIG_CHECK #=""


                if use mdevd; then
                        CONFIG_CHECK+=" ~DEVTMPFS"
                fi

                if use custom_kernel; then
                        if use mdadm; then
                                CONFIG_CHECK+=" ~MD ~MD_LINEAR ~MD_RAID0 \
                                ~MD_RAID1 ~MD_RAID10 ~MD_RAID456"
                        fi

                        if use clvm; then
                                CONFIG_CHECK+=" ~BLK_DEV_DM ~DM_SNAPSHOT \
                                ~DM_MIRROR ~DM_RAID ~DM_UEVENT"
                        fi

                        if use device-mapper; then
                                CONFIG_CHECK+=" ~BLK_DEV_DM ~DM_SNAPSHOT \
                                ~DM_MIRROR ~DM_RAID ~DM_UEVENT"
                        fi
                        if use cryptsetup; then
                                CONFIG_CHECK+=" ~DM_CRYPT"
                        fi

               fi
        fi
        if [[ -z ${ROOT} ]] && use busybox ; then
                # Needed to avoid busybox preferring internal applets over PATH lookups.
                # https://web.archive.org/web/20221206223848/https://busybox.net/FAQ.html#standalone_shell.
                if busybox bbconfig | grep -q "CONFIG_FEATURE_SH_STANDALONE=y" ; then
                        ewarn "busybox is configured with CONFIG_FEATURE_SH_STANDALONE=y!"
                        ewarn "This is not a safe configuration for busybox as /bin/sh."
                        ewarn "Please use savedconfig to disable CONFIG_FEATURE_SH_STANDALONE on busybox."
                        die "Aborting due to unsafe Busybox configuration (CONFIG_FEATURE_SH_STANDALONE=y)!"
                fi
        fi

}
src_unpack(){
	unpack ${A}
	cd "${S}"
	sed -i scr/mkinitramfs-${SLOT}/Makefile
	sed -i scr/mkinitramfs-${SLOT}/Makefile.lint
        sed -i scr/mkinitramfs-${SLOT}/config.mk
}
src_configure(){
        local platform

        case ${MULTIBUILD_VARIANT} in
                efi*) platform=efi ;;
                xen-pvh) platform=xen_pvh ;;
                xen*) platform=xen ;;
                guessed) ;;
                *) platform=${MULTIBUILD_VARIANT} ;;
        esac

        local myeconfargs=(
                --disable-werror
                --program-prefix=
                --libdir="${EPREFIX}"/usr/lib
                $(use_enable device-mapper)
                $(use_enable mount)
                $(use_enable busybox)
                $(use_enable mdevd)
                $(use_enable libzfs)
                $(use_enable luks)
                $(use_with openrc)
                $(use_enable libressl)
                $(use_enable cswap)
                $(use_with gcrypt libgcrypt)
        )
        local ECONF_SOURCE="${S}"
        econf "${myeconfargs[@]}"
}
#look into sys-libs/ncurses for more info on ldd
efi_arch() {
        case "$(tc-arch)" in
                amd64) echo x64 ;;
                arm)   echo arm ;;
                arm64) echo aa64 ;;
                x86)   echo x86 ;;
        esac
}
#found this in app-crypt/gocryptfs
src_prepare() {
        default
        sed -e 's:ldd gocryptfs 2> /dev/null:! ldd gocryptfs | grep -q "statically linked":' \
                -i "${S}/build-without-openssl.bash" || die
}
src_compile(){
        # Sandbox bug 404013.
        # use libzfs && { addpredict /etc/dfs; addpredict /dev/zfs; }

	emake || die
}
src_test() {
        # The qemu dependency is a bit complex.
        # You will need to adjust QEMU_SOFTMMU_TARGETS to match the cpu/platform.
        local SANDBOX_WRITE=${SANDBOX_WRITE}
        addwrite /dev

        distutils-r1_src_test
}
#sys-kernel/installkernel had the hook for efistub
src_install(){
        local
        use

        default

        local ARCH
        use amd64 && ARCH="x64"
        use arm64 && ARCH="arm"
        use ppc64 && ARCH="ppc64"
        use x64-solaris && ARCH="solaris_x86"
        use x86 && ARCH="x86"

        exeinto
        doexe

        # e2fsprogs-libs didn't install .la files, and .pc work fine
        find "${ED}" -name "*.la" -delete || die

        if use uefi; then
                use efistub && doexe hooks/95-efistub-uefi-mkconfig.install
                if use amd64 || use arm64; then
                        exeinto /efi/EFI/
                        secureboot_auto_sign --in-place
                        doexe EFI/<vendor>/<application>.efi
                fi
        fi
        if use mdevd; then
                insinto "${HOOK_DIR}"
                doins "${WORKDIR}${HOOK_DIR}${HOOK_MDEV}"

                insinto "${INST_DIR}"
                doins "${WORKDIR}${INST_DIR}${INST_MDEV}"

        fi
        if use device-mapper; then
                insinto "${HOOK_DIR}"
                doins "${WORKDIR}${HOOK_DIR}${HOOK_DM}"

                insinto "${INST_DIR}"
                doins "${WORKDIR}${INST_DIR}${INST_DM}"

                if use mdevd; then
                        insinto "${MDEV_DIR}"
                        doins "${WORKDIR}${UDEV_DIR}${MDEV_RULE}"
                fi
        fi
        if use mdadm; then
                insinto "${HOOK_DIR}"
                doins "${WORKDIR}${HOOK_DIR}${HOOK_MDADM}"
                dosym "${WORKDIR}${HOOK_DIR}${HOOK_MDADM}" "${HOOK_DIR}/raid"

                insinto "${INST_DIR}"
                doins "${WORKDIR}${INST_DIR}${INST_MDADM}"
                doins "${WORKDIR}${INST_DIR}${INST_MDADM_UDEV}"
        fi
        if use cryptsetup; then
                insinto "${HOOK_DIR}"
                doins "${WORKDIR}${HOOK_DIR}${HOOK_CS}"

                insinto "${INST_DIR}"
                doins "${WORKDIR}${INST_DIR}${INST_CS}"
        fi

        elif use efistub; then
        echo "layout=efistub" >> "${T}/install.conf" || die

        dodir
        dosym

        insinto /etc/mkinitcpio.d/
        doins ${FILESDIR}/preset/gentoo.preset || die

        insinto /etc/modprobe.d/
        doins ${FILESDIR}/usb-load-ehci-first.conf || die

        emake DESTDIR="${D}" install || die "failed"
}
pkg_preinst() {
        use uefi && mount-boot_pkg_preinst
        if use efistub; then
                ewarn "Automated EFI Stub booting is highly experimental. UEFI implementations"
                ewarn "often differ between vendors and as a result EFI stub booting is not"
                ewarn "guaranteed to work for all UEFI systems. Ensure an alternative method"
                ewarn "of booting the system is available before rebooting."
        fi
}
pkg_prerm() {
        use uefi && mount-boot_pkg_prerm
}
pkg_postrm() {
        # make sure we don't leave the user without /bin/sh, since it's not
        # been owned by any other package
        if [[ ! -h ${EROOT}/bin/sh ]]; then
                ln -s bash "${EROOT}/bin/sh" || die
        fi
}

