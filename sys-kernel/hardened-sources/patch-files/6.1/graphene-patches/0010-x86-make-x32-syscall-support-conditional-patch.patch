--- a/debian/patches/features/x86/x86-make-x32-syscall-support-conditional.patch	2025-01-14 23:27:07.337001055 -0000
+++ b/debian/patches/features/x86/x86-make-x32-syscall-support-conditional.patch	2025-01-15 07:29:59.147137704 -0000
@@ -59,18 +59,18 @@ Signed-off-by: Ben Hutchings <ben@decade
  	depends on IA32_EMULATION || X86_X32_ABI
 --- a/arch/x86/entry/common.c
 +++ b/arch/x86/entry/common.c
-@@ -62,7 +62,7 @@ static __always_inline bool do_syscall_x
+@@ -63,7 +63,7 @@ static __always_inline bool do_syscall_x
  	 */
  	unsigned int xnr = nr - __X32_SYSCALL_BIT;
  
 -	if (IS_ENABLED(CONFIG_X86_X32_ABI) && likely(xnr < X32_NR_syscalls)) {
 +	if (IS_ENABLED(CONFIG_X86_X32_ABI) && unlikely(x32_enabled) && likely(xnr < X32_NR_syscalls)) {
  		xnr = array_index_nospec(xnr, X32_NR_syscalls);
- 		regs->ax = x32_sys_call_table[xnr](regs);
+ 		regs->ax = x32_sys_call(regs, xnr);
  		return true;
 --- a/arch/x86/entry/syscall_x32.c
 +++ b/arch/x86/entry/syscall_x32.c
-@@ -4,6 +4,9 @@
+@@ -4,6 +4,9 @@ 
  #include <linux/linkage.h>
  #include <linux/sys.h>
  #include <linux/cache.h>
@@ -80,9 +80,9 @@ Signed-off-by: Ben Hutchings <ben@decade
  #include <linux/syscalls.h>
  #include <asm/syscall.h>
  
-@@ -16,3 +19,46 @@
- asmlinkage const sys_call_ptr_t x32_sys_call_table[] = {
- #include <asm/syscalls_x32.h>
+@@ -20,3 +23,46 @@ long x32_sys_call(const struct pt_regs *
+ 	default: return __x64_sys_ni_syscall(regs);
+ 	}
  };
 +
 +/* Maybe enable x32 syscalls */
@@ -129,7 +129,7 @@ Signed-off-by: Ben Hutchings <ben@decade
 +arch_param_cb(x32, &x32_param_ops, NULL, 0444);
 --- a/arch/x86/include/asm/elf.h
 +++ b/arch/x86/include/asm/elf.h
-@@ -11,6 +11,9 @@
+@@ -11,6 +11,9 @@ 
  #include <asm/user.h>
  #include <asm/auxvec.h>
  #include <asm/fsgsbase.h>
@@ -151,7 +151,7 @@ Signed-off-by: Ben Hutchings <ben@decade
  # error "The following code assumes __USER32_DS == __USER_DS"
 --- a/arch/x86/include/asm/syscall.h
 +++ b/arch/x86/include/asm/syscall.h
-@@ -13,6 +13,7 @@
+@@ -13,6 +13,7 @@ 
  #include <uapi/linux/audit.h>
  #include <linux/sched.h>
  #include <linux/err.h>
@@ -159,9 +159,9 @@ Signed-off-by: Ben Hutchings <ben@decade
  #include <asm/thread_info.h>	/* for TS_COMPAT */
  #include <asm/unistd.h>
  
-@@ -30,6 +31,18 @@ extern const sys_call_ptr_t ia32_sys_cal
- extern const sys_call_ptr_t x32_sys_call_table[];
- #endif
+@@ -28,6 +29,18 @@ extern long ia32_sys_call(const struct p
+ extern long x32_sys_call(const struct pt_regs *, unsigned int nr);
+ extern long x64_sys_call(const struct pt_regs *, unsigned int nr);
  
 +#if defined(CONFIG_X86_X32_ABI)
 +#if defined(CONFIG_X86_X32_DISABLED)
